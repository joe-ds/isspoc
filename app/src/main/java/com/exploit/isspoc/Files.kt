package com.exploit.isspoc

import android.graphics.BitmapFactory
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.PageSize
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.material3.Text
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.exploit.isspoc.ui.theme.ISSPoCTheme
import java.io.File

class Files : ComponentActivity() {
    @OptIn(ExperimentalFoundationApi::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            ISSPoCTheme {
                val files: List<String> = this.fileList().filter { !(it.endsWith(stringResource(R.string.reduced_jpg))) }
                if (files.isEmpty()) {
                    Column(modifier = Modifier.fillMaxSize()) {
                        Image(
                            painter = painterResource(id = R.drawable.frog_bird),
                            contentDescription = stringResource(R.string.a_majestic_frog_parrot_hybrid)
                        )
                        Text(text = "No images available", fontSize = 30.sp,
                            modifier = Modifier
                                .align(Alignment.CenterHorizontally)
                                .padding(9.dp))
                    }
                } else {
                    val pagerState = rememberPagerState(pageCount = { files.size })
                    val context = LocalContext.current
                    Column(modifier = Modifier.fillMaxSize()) {
                        Box(modifier = Modifier.align(Alignment.CenterHorizontally)) {
                            Text(
                                textAlign = TextAlign.Center,
                                text = stringResource(R.string.iss_poc),
                                modifier = Modifier
                                    .align(Alignment.Center)
                            )
                        }
                        HorizontalPager(modifier = Modifier.fillMaxHeight(0.9f),
                            state = pagerState,
                            key = { files[it] },
                            pageSize = PageSize.Fill
                        ) { index ->
                            val file = File(context.filesDir, files[index])
                            val imgBitmap = BitmapFactory.decodeFile(file.absolutePath)
                            if (imgBitmap != null) {
                                Box {
                                    Image(
                                        bitmap = imgBitmap.asImageBitmap(),
                                        contentDescription = "Snapshot file ${file.absolutePath} displayed.",
                                        contentScale = ContentScale.FillHeight,
                                        modifier = Modifier.fillMaxSize()
                                    )
                                }
                            } else {
                                // Fallback if the image cannot be loaded
                                Text(text = stringResource(R.string.image_failed_to_load), modifier = Modifier.fillMaxSize())
                            }
                        }
                        Box(modifier = Modifier.align(Alignment.CenterHorizontally)) {
                            Text(
                                textAlign = TextAlign.Center,
                                text = "☠️ Snapshot Retrieved ${files[pagerState.currentPage]} ☠️",
                                // text = stringResource(R.string.snapshot_retrieved),
                                color = Color.Red
                            )
                        }
                    }
                }
            }
        }
    }
}